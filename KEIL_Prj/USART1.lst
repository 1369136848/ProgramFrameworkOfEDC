C51 COMPILER V8.05a   USART1                                                               06/28/2017 22:06:40 PAGE 1   


C51 COMPILER V8.05a, COMPILATION OF MODULE USART1
OBJECT MODULE PLACED IN .\USART1.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\HARDWARE\BSP\USART1.C LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\USART1.
                    -lst) TABS(2) OBJECT(.\USART1.obj)

line level    source

   1          /************************************************************
   2          * 组织名称： (C), 1988-1999, Tech. Co., Ltd.
   3          * 文件名称: test.cpp
   4          * 作者:
   5          * 版本 :
   6          * 日期:
   7          * 描述: // 模块描述
   8          * 主要函数及其功能 : // 主要函数及其功能
   9            1. -------
  10          * 历史修改记录: // 历史修改记录
  11          * <作者> <时间> <版本 > <描述>
  12          * David 96/10/12 1.0 build this moudle
  13          ***********************************************************/
  14          #include "USART1.h"
  15          COMx_Define COM1,COM2,COM3,COM4;
  16          u8  xdata TX1_Buffer[COM_TX1_Lenth];  //发送缓冲
  17          u8  xdata RX1_Buffer[COM_RX1_Lenth];  //接收缓冲
  18          u8  xdata TX2_Buffer[COM_TX2_Lenth];  //发送缓冲
  19          u8  xdata RX2_Buffer[COM_RX2_Lenth];  //接收缓冲
  20          u8  xdata TX3_Buffer[COM_TX3_Lenth];  //发送缓冲
  21          u8  xdata RX3_Buffer[COM_RX3_Lenth];  //接收缓冲
  22          u8  xdata TX4_Buffer[COM_TX4_Lenth];  //发送缓冲
  23          u8  xdata RX4_Buffer[COM_RX4_Lenth];  //接收缓冲
  24          
  25          u8 USART_Configuration(u8 UARTx, COMx_InitDefine *COMx)
  26          {
  27   1        u8  i;
  28   1        u32 j;
  29   1        
  30   1        if(UARTx == USART1)
  31   1        {
  32   2          COM1.id = 1;
  33   2          COM1.TX_read    = 0;
  34   2          COM1.TX_write   = 0;
  35   2          COM1.B_TX_busy  = 0;
  36   2          COM1.RX_Cnt     = 0;
  37   2          COM1.RX_TimeOut = 0;
  38   2          COM1.B_RX_OK    = 0;
  39   2          for(i=0; i<COM_TX1_Lenth; i++)  TX1_Buffer[i] = 0;
  40   2          for(i=0; i<COM_RX1_Lenth; i++)  RX1_Buffer[i] = 0;
  41   2      
  42   2          if(COMx->UART_Mode > UART_9bit_BRTx)  return 2; //模式错误
  43   2          if(COMx->UART_Polity == PolityHigh)   PS = 1; //高优先级中断
  44   2          else                  PS = 0; //低优先级中断
  45   2          SCON = (SCON & 0x3f) | COMx->UART_Mode;
  46   2          if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx)) //可变波特率
  47   2          {
  48   3            j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;  //按1T计算
  49   3            if(j >= 65536UL)  return 2; //错误
  50   3            j = 65536UL - j;
  51   3            if(COMx->UART_BRT_Use == BRT_Timer1)
  52   3            {
  53   4              TR1 = 0;
  54   4              AUXR &= ~0x01;    //S1 BRT Use Timer1;
C51 COMPILER V8.05a   USART1                                                               06/28/2017 22:06:40 PAGE 2   

  55   4              TMOD &= ~(1<<6);  //Timer1 set As Timer
  56   4              TMOD &= ~0x30;    //Timer1_16bitAutoReload;
  57   4              AUXR |=  (1<<6);  //Timer1 set as 1T mode
  58   4              TH1 = (u8)(j>>8);
  59   4              TL1 = (u8)j;
  60   4              ET1 = 0;  //禁止中断
  61   4              TMOD &= ~0x40;  //定时
  62   4              INT_CLKO &= ~0x02;  //不输出时钟
  63   4              TR1  = 1;
  64   4            }
  65   3            else if(COMx->UART_BRT_Use == BRT_Timer2)
  66   3            {
  67   4              AUXR &= ~(1<<4);  //Timer stop
  68   4              AUXR |= 0x01;   //S1 BRT Use Timer2;
  69   4              AUXR &= ~(1<<3);  //Timer2 set As Timer
  70   4              AUXR |=  (1<<2);  //Timer2 set as 1T mode
  71   4              TH2 = (u8)(j>>8);
  72   4              TL2 = (u8)j;
  73   4              IE2  &= ~(1<<2);  //禁止中断
  74   4              AUXR &= ~(1<<3);  //定时
  75   4              AUXR |=  (1<<4);  //Timer run enable
  76   4            }
  77   3            else return 2;  //错误
  78   3          }
  79   2          else if(COMx->UART_Mode == UART_ShiftRight)
  80   2          {
  81   3            if(COMx->BaudRateDouble == ENABLE)  AUXR |=  (1<<5);  //固定波特率SysClk/2
  82   3            else                AUXR &= ~(1<<5);  //固定波特率SysClk/12
  83   3          }
  84   2          else if(COMx->UART_Mode == UART_9bit) //固定波特率SysClk*2^SMOD/64
  85   2          {
  86   3            if(COMx->BaudRateDouble == ENABLE)  PCON |=  (1<<7);  //固定波特率SysClk/32
  87   3            else                PCON &= ~(1<<7);  //固定波特率SysClk/64
  88   3          }
  89   2          if(COMx->UART_Interrupt == ENABLE)  ES = 1; //允许中断
  90   2          else                ES = 0; //禁止中断
  91   2          if(COMx->UART_RxEnable == ENABLE) REN = 1;  //允许接收
  92   2          else                REN = 0;  //禁止接收
  93   2          P_SW1 = (P_SW1 & 0x3f) | (COMx->UART_P_SW & 0xc0);  //切换IO
  94   2          if(COMx->UART_RXD_TXD_Short == ENABLE)  PCON2 |=  (1<<4); //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
  95   2          else                  PCON2 &= ~(1<<4);
  96   2          return  0;
  97   2        }
  98   1      
  99   1        if(UARTx == USART2)
 100   1        {
 101   2          COM2.id = 2;
 102   2          COM2.TX_read    = 0;
 103   2          COM2.TX_write   = 0;
 104   2          COM2.B_TX_busy  = 0;
 105   2          COM2.RX_Cnt     = 0;
 106   2          COM2.RX_TimeOut = 0;
 107   2          COM2.B_RX_OK    = 0;
 108   2          for(i=0; i<COM_TX2_Lenth; i++)  TX2_Buffer[i] = 0;
 109   2          for(i=0; i<COM_RX2_Lenth; i++)  RX2_Buffer[i] = 0;
 110   2      
 111   2          if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx)) //可变波特率
 112   2          {
 113   3            if(COMx->UART_Polity == PolityHigh)   IP2 |=  1;  //高优先级中断
 114   3            else                  IP2 &= ~1;  //低优先级中断
 115   3            if(COMx->UART_Mode == UART_9bit_BRTx) S2CON |=  (1<<7); //9bit
 116   3            else                  S2CON &= ~(1<<7); //8bit
C51 COMPILER V8.05a   USART1                                                               06/28/2017 22:06:40 PAGE 3   

 117   3            j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;  //按1T计算
 118   3            if(j >= 65536UL)  return 2; //错误
 119   3            j = 65536UL - j;
 120   3            AUXR &= ~(1<<4);  //Timer stop
 121   3            AUXR &= ~(1<<3);  //Timer2 set As Timer
 122   3            AUXR |=  (1<<2);  //Timer2 set as 1T mode
 123   3            TH2 = (u8)(j>>8);
 124   3            TL2 = (u8)j;
 125   3            IE2  &= ~(1<<2);  //禁止中断
 126   3            AUXR |=  (1<<4);  //Timer run enable
 127   3          }
 128   2          else  return 2; //模式错误
 129   2          if(COMx->UART_Interrupt == ENABLE)  IE2   |=  1;    //允许中断
 130   2          else                IE2   &= ~1;    //禁止中断
 131   2          if(COMx->UART_RxEnable == ENABLE) S2CON |=  (1<<4); //允许接收
 132   2          else                S2CON &= ~(1<<4); //禁止接收
 133   2          P_SW2 = (P_SW2 & ~1) | (COMx->UART_P_SW & 0x01);  //切换IO    
 134   2        }
 135   1          
 136   1          if(UARTx == USART3)
 137   1        {
 138   2          COM3.id = 2;
 139   2          COM3.TX_read    = 0;
 140   2          COM3.TX_write   = 0;
 141   2          COM3.B_TX_busy  = 0;
 142   2          COM3.RX_Cnt     = 0;
 143   2          COM3.RX_TimeOut = 0;
 144   2          COM3.B_RX_OK    = 0;
 145   2          for(i=0; i<COM_TX3_Lenth; i++)  TX3_Buffer[i] = 0;
 146   2          for(i=0; i<COM_RX3_Lenth; i++)  RX3_Buffer[i] = 0;
 147   2              if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx)) //可变波特率
 148   2          {
 149   3            S3CON &= ~(1<<5); //禁止多机通讯方式
 150   3            if(COMx->UART_Mode == UART_9bit_BRTx) S3CON |=  (1<<7); //9bit
 151   3            else                  S3CON &= ~(1<<7); //8bit
 152   3            j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;  //按1T计算
 153   3            if(j >= 65536UL)  return 2; //错误
 154   3            j = 65536UL - j;
 155   3            if(COMx->UART_BRT_Use == BRT_Timer2)
 156   3            {
 157   4              S3CON &= ~(1<<6); //BRT select Timer2
 158   4              AUXR &= ~(1<<4);  //Timer stop
 159   4              AUXR &= ~(1<<3);  //Timer2 set As Timer
 160   4              AUXR |=  (1<<2);  //Timer2 set as 1T mode
 161   4              TH2 = (u8)(j>>8);
 162   4              TL2 = (u8)j;
 163   4              IE2  &= ~(1<<2);  //禁止中断
 164   4              AUXR |=  (1<<4);  //Timer run enable
 165   4            }
 166   3            else if(COMx->UART_BRT_Use == BRT_Timer3)
 167   3            {
 168   4              S3CON |= (1<<6);  //BRT select Timer3
 169   4              T4T3M &= 0xf0;    //停止计数, 清除控制位
 170   4              IE2  &= ~(1<<5);  //禁止中断
 171   4              T4T3M |=  (1<<1); //1T
 172   4              T4T3M &= ~(1<<2); //定时
 173   4              T4T3M &= ~1;    //不输出时钟
 174   4              TH3 = (u8)(j >> 8);
 175   4              TL3 = (u8)j;
 176   4              T4T3M |=  (1<<3); //开始运行
 177   4            }
 178   3            else  return 2;
C51 COMPILER V8.05a   USART1                                                               06/28/2017 22:06:40 PAGE 4   

 179   3          }
 180   2          else  return 2; //模式错误
 181   2          if(COMx->UART_Interrupt == ENABLE)  IE2   |=  (1<<3); //允许中断
 182   2          else                IE2   &= ~(1<<3); //禁止中断
 183   2          if(COMx->UART_RxEnable == ENABLE) S3CON |=  (1<<4); //允许接收
 184   2          else                S3CON &= ~(1<<4); //禁止接收
 185   2          P_SW2 = (P_SW2 & ~2) | (COMx->UART_P_SW & 0x02);  //切换IO
 186   2          return  0;
 187   2            
 188   2        }
 189   1          
 190   1          if(UARTx == USART4)
 191   1        {
 192   2          COM4.id = 2;
 193   2          COM4.TX_read    = 0;
 194   2          COM4.TX_write   = 0;
 195   2          COM4.B_TX_busy  = 0;
 196   2          COM4.RX_Cnt     = 0;
 197   2          COM4.RX_TimeOut = 0;
 198   2          COM4.B_RX_OK    = 0;
 199   2          for(i=0; i<COM_TX4_Lenth; i++)  TX4_Buffer[i] = 0;
 200   2          for(i=0; i<COM_RX4_Lenth; i++)  RX4_Buffer[i] = 0;
 201   2      
 202   2          if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx)) //可变波特率
 203   2          {
 204   3            S4CON &= ~(1<<5); //禁止多机通讯方式
 205   3            if(COMx->UART_Mode == UART_9bit_BRTx) S4CON |=  (1<<7); //9bit
 206   3            else                  S4CON &= ~(1<<7); //8bit
 207   3            j = (MAIN_Fosc / 4) / COMx->UART_BaudRate;  //按1T计算
 208   3            if(j >= 65536UL)  return 2; //错误
 209   3            j = 65536UL - j;
 210   3            if(COMx->UART_BRT_Use == BRT_Timer2)
 211   3            {
 212   4              S4CON &= ~(1<<6); //BRT select Timer2
 213   4              AUXR &= ~(1<<4);  //Timer stop
 214   4              AUXR &= ~(1<<3);  //Timer2 set As Timer
 215   4              AUXR |=  (1<<2);  //Timer2 set as 1T mode
 216   4              TH2 = (u8)(j>>8);
 217   4              TL2 = (u8)j;
 218   4              IE2  &= ~(1<<2);  //禁止中断
 219   4              AUXR |=  (1<<4);  //Timer run enable
 220   4            }
 221   3            else if(COMx->UART_BRT_Use == BRT_Timer4)
 222   3            {
 223   4              S4CON |= (1<<6);  //BRT select Timer4
 224   4              T4T3M &= 0x0f;    //停止计数, 清除控制位
 225   4              IE2   &= ~(1<<6); //禁止中断
 226   4              T4T3M |=  (1<<5); //1T
 227   4              T4T3M &= ~(1<<6); //定时
 228   4              T4T3M &= ~(1<<4); //不输出时钟
 229   4              TH4 = (u8)(j >> 8);
 230   4              TL4 = (u8)j;
 231   4              T4T3M |=  (1<<7); //开始运行
 232   4            }
 233   3            else  return 2;
 234   3          }
 235   2          else  return 2; //模式错误
 236   2          if(COMx->UART_Interrupt == ENABLE)  IE2   |=  (1<<4); //允许中断
 237   2          else                IE2   &= ~(1<<4); //禁止中断
 238   2          if(COMx->UART_RxEnable == ENABLE) S4CON |=  (1<<4); //允许接收
 239   2          else                S4CON &= ~(1<<4); //禁止接收
 240   2          P_SW2 = (P_SW2 & ~4) | (COMx->UART_P_SW & 0x04);  //切换IO
C51 COMPILER V8.05a   USART1                                                               06/28/2017 22:06:40 PAGE 5   

 241   2          return  0;
 242   2        }
 243   1          
 244   1        return 3;
 245   1      }
 246          
 247          
 248          /*************** 装载串口发送缓冲 *******************************/
 249          
 250          void TX1_write2buff(u8 dat) //写入发送缓冲，指针+1
 251          {
 252   1        TX1_Buffer[COM1.TX_write] = dat;  //装发送缓冲
 253   1        if(++COM1.TX_write >= COM_TX1_Lenth)  COM1.TX_write = 0;
 254   1      
 255   1        if(COM1.B_TX_busy == 0)   //空闲
 256   1        {  
 257   2          COM1.B_TX_busy = 1;   //标志忙
 258   2          TI = 1;         //触发发送中断
 259   2        }
 260   1      }
 261          
 262          void TX2_write2buff(u8 dat) //写入发送缓冲，指针+1
 263          {
 264   1        TX2_Buffer[COM2.TX_write] = dat;  //装发送缓冲
 265   1        if(++COM2.TX_write >= COM_TX2_Lenth)  COM2.TX_write = 0;
 266   1      
 267   1        if(COM2.B_TX_busy == 0)   //空闲
 268   1        {  
 269   2          COM2.B_TX_busy = 1;   //标志忙
 270   2          SET_TI2();        //触发发送中断
 271   2        }
 272   1      }
 273          
 274          void TX3_write2buff(u8 dat) //写入发送缓冲，指针+1
 275          {
 276   1        TX3_Buffer[COM3.TX_write] = dat;  //装发送缓冲
 277   1        if(++COM3.TX_write >= COM_TX3_Lenth)  COM3.TX_write = 0;
 278   1      
 279   1        if(COM3.B_TX_busy == 0)   //空闲
 280   1        {  
 281   2          COM3.B_TX_busy = 1;   //标志忙
 282   2          SET_TI3();          //触发发送中断
 283   2        }
 284   1      }
 285          
 286          void TX4_write2buff(u8 dat) //写入发送缓冲，指针+1
 287          {
 288   1        TX4_Buffer[COM4.TX_write] = dat;  //装发送缓冲
 289   1        if(++COM4.TX_write >= COM_TX4_Lenth)  COM4.TX_write = 0;
 290   1      
 291   1        if(COM4.B_TX_busy == 0)   //空闲
 292   1        {  
 293   2          COM4.B_TX_busy = 1;   //标志忙
 294   2          SET_TI4();      //触发发送中断
 295   2        }
 296   1      }
 297          
 298          void PrintString1(u8 *puts)
 299          {
 300   1          for (; *puts != 0;  puts++)  TX1_write2buff(*puts);   //遇到停止符0结束
 301   1      }
 302          
C51 COMPILER V8.05a   USART1                                                               06/28/2017 22:06:40 PAGE 6   

 303          void PrintString2(u8 *puts)
 304          {
 305   1          for (; *puts != 0;  puts++)  TX2_write2buff(*puts);   //遇到停止符0结束
 306   1      }
 307          
 308          void PrintString3(u8 *puts)
 309          {
 310   1          for (; *puts != 0;  puts++)  TX3_write2buff(*puts);   //遇到停止符0结束
 311   1      }
 312          
 313          void PrintString4(u8 *puts)
 314          {
 315   1          for (; *puts != 0;  puts++)  TX4_write2buff(*puts);   //遇到停止符0结束
 316   1      }
 317          
 318          
 319          
 320          
 321          
 322          /********************* UART1中断函数************************/
 323          void UART1_int (void) interrupt UART1_VECTOR
 324          {
 325   1        if(RI)
 326   1        {
 327   2          RI = 0;
 328   2          if(COM1.B_RX_OK == 0)
 329   2          {
 330   3            if(COM1.RX_Cnt >= COM_RX1_Lenth)  COM1.RX_Cnt = 0;
 331   3            RX1_Buffer[COM1.RX_Cnt++] = SBUF;
 332   3            COM1.RX_TimeOut = TimeOutSet1;
 333   3          }
 334   2        }
 335   1      
 336   1        if(TI)
 337   1        {
 338   2          TI = 0;
 339   2          if(COM1.TX_read != COM1.TX_write)
 340   2          {
 341   3            SBUF = TX1_Buffer[COM1.TX_read];
 342   3            if(++COM1.TX_read >= COM_TX1_Lenth)   COM1.TX_read = 0;
 343   3          }
 344   2          else  COM1.B_TX_busy = 0;
 345   2        }
 346   1      }
 347          
 348          /********************* UART2中断函数************************/
 349          void UART2_int (void) interrupt UART2_VECTOR
 350          {
 351   1        if(RI2)
 352   1        {
 353   2          CLR_RI2();
 354   2          if(COM2.B_RX_OK == 0)
 355   2          {
 356   3            if(COM2.RX_Cnt >= COM_RX2_Lenth)  COM2.RX_Cnt = 0;
 357   3            RX2_Buffer[COM2.RX_Cnt++] = S2BUF;
 358   3            COM2.RX_TimeOut = TimeOutSet2;
 359   3          }
 360   2        }
 361   1      
 362   1        if(TI2)
 363   1        {
 364   2          CLR_TI2();
C51 COMPILER V8.05a   USART1                                                               06/28/2017 22:06:40 PAGE 7   

 365   2          if(COM2.TX_read != COM2.TX_write)
 366   2          {
 367   3            S2BUF = TX2_Buffer[COM2.TX_read];
 368   3            if(++COM2.TX_read >= COM_TX2_Lenth)   COM2.TX_read = 0;
 369   3          }
 370   2          else  COM2.B_TX_busy = 0;
 371   2        }
 372   1      
 373   1      }
 374          
 375          
 376          /********************* UART3中断函数************************/
 377          void UART3_int (void) interrupt UART3_VECTOR
 378          {
 379   1        if(RI3)
 380   1        {
 381   2          CLR_RI3();
 382   2          if(COM3.B_RX_OK == 0)
 383   2          {
 384   3            if(COM3.RX_Cnt >= COM_RX3_Lenth)  COM3.RX_Cnt = 0;
 385   3            RX3_Buffer[COM3.RX_Cnt++] = S3BUF;
 386   3            COM3.RX_TimeOut = TimeOutSet3;
 387   3          }
 388   2        }
 389   1      
 390   1        if(TI3)
 391   1        {
 392   2          CLR_TI3();
 393   2          if(COM3.TX_read != COM3.TX_write)
 394   2          {
 395   3            S3BUF = TX3_Buffer[COM3.TX_read];
 396   3            if(++COM3.TX_read >= COM_TX3_Lenth)   COM3.TX_read = 0;
 397   3          }
 398   2          else  COM3.B_TX_busy = 0;
 399   2        }
 400   1      
 401   1      }
 402          
 403          
 404          /********************* UART4中断函数************************/
 405          void UART4_int (void) interrupt UART4_VECTOR
 406          {
 407   1        if(RI4)
 408   1        {
 409   2          CLR_RI4();
 410   2          if(COM4.B_RX_OK == 0)
 411   2          {
 412   3            if(COM4.RX_Cnt >= COM_RX4_Lenth)  COM4.RX_Cnt = 0;
 413   3            RX4_Buffer[COM4.RX_Cnt++] = S4BUF;
 414   3            COM4.RX_TimeOut = TimeOutSet4;
 415   3          }
 416   2        }
 417   1      
 418   1        if(TI4)
 419   1        {
 420   2          CLR_TI4();
 421   2          if(COM4.TX_read != COM4.TX_write)
 422   2          {
 423   3            S4BUF = TX3_Buffer[COM4.TX_read];
 424   3            if(++COM4.TX_read >= COM_TX4_Lenth)   COM4.TX_read = 0;
 425   3          }
 426   2          else  COM4.B_TX_busy = 0;
C51 COMPILER V8.05a   USART1                                                               06/28/2017 22:06:40 PAGE 8   

 427   2        }
 428   1      
 429   1      }
 430          
 431          
 432          
 433          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2521    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    652       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
